// <auto-generated />
using System;
using MachinePortal.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace MachinePortal.Migrations.MachinePortal
{
    [DbContext(typeof(MachinePortalContext))]
    [Migration("20210519132926_initial")]
    partial class initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.14-servicing-32113")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);


            modelBuilder.Entity("MachinePortal.Models.Area", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ImagePath");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("ID");

                    b.ToTable("Area");
                });

            modelBuilder.Entity("MachinePortal.Models.Device", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Brand")
                        .HasMaxLength(50);

                    b.Property<string>("Description")
                        .HasMaxLength(200);

                    b.Property<string>("ImagePath");

                    b.Property<string>("Model")
                        .HasMaxLength(50);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("PartNumber")
                        .HasMaxLength(50);

                    b.Property<double>("Price");

                    b.Property<string>("Supplier")
                        .HasMaxLength(50);

                    b.HasKey("ID");

                    b.ToTable("Device");
                });

            modelBuilder.Entity("MachinePortal.Models.DeviceDocument", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("DeviceID");

                    b.Property<string>("Extension");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("Path");

                    b.HasKey("ID");

                    b.HasIndex("DeviceID");

                    b.ToTable("DeviceDocument");
                });

            modelBuilder.Entity("MachinePortal.Models.Line", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ImagePath");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<int>("SectorID");

                    b.HasKey("ID");

                    b.HasIndex("SectorID");

                    b.ToTable("Line");
                });

            modelBuilder.Entity("MachinePortal.Models.Machine", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AreaID");

                    b.Property<int>("AssetNumber");

                    b.Property<int>("CostCenter");

                    b.Property<string>("Description")
                        .HasMaxLength(200);

                    b.Property<string>("ImagePath");

                    b.Property<int>("LineID");

                    b.Property<string>("MES_Name");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("SAP_Name");

                    b.Property<int>("SectorID");

                    b.Property<string>("ServerPath");

                    b.Property<string>("WorkCenter");

                    b.HasKey("ID");

                    b.HasIndex("AreaID");

                    b.HasIndex("LineID");

                    b.HasIndex("SectorID");

                    b.ToTable("Machine");
                });

            modelBuilder.Entity("MachinePortal.Models.MachineComment", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Comment");

                    b.Property<DateTime>("Date");

                    b.Property<int>("MachineID");

                    b.Property<string>("UserID");

                    b.HasKey("ID");

                    b.HasIndex("MachineID");

                    b.HasIndex("UserID");

                    b.ToTable("MachineComment");
                });

            modelBuilder.Entity("MachinePortal.Models.MachineDevice", b =>
                {
                    b.Property<int>("MachineID");

                    b.Property<int>("DeviceID");

                    b.HasKey("MachineID", "DeviceID");

                    b.HasIndex("DeviceID");

                    b.ToTable("MachineDevice");
                });

            modelBuilder.Entity("MachinePortal.Models.MachineDocument", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Category");

                    b.Property<string>("Extension");

                    b.Property<string>("FileName");

                    b.Property<int>("MachineID");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("Path");

                    b.Property<string>("Type");

                    b.HasKey("ID");

                    b.HasIndex("MachineID");

                    b.ToTable("MachineDocument");
                });

            modelBuilder.Entity("MachinePortal.Models.MachineImage", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Category");

                    b.Property<string>("Extension");

                    b.Property<string>("FileName");

                    b.Property<int>("MachineID");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("Path");

                    b.Property<string>("Type");

                    b.HasKey("ID");

                    b.HasIndex("MachineID");

                    b.ToTable("MachineImage");
                });

            modelBuilder.Entity("MachinePortal.Models.MachinePassword", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("DepartmentID");

                    b.Property<string>("EquipmentDescription");

                    b.Property<string>("EquipmentName");

                    b.Property<string>("Level");

                    b.Property<int?>("MachineID");

                    b.Property<string>("Password");

                    b.Property<string>("User");

                    b.HasKey("ID");

                    b.HasIndex("DepartmentID");

                    b.HasIndex("MachineID");

                    b.ToTable("MachinePassword");
                });

            modelBuilder.Entity("MachinePortal.Models.MachineResponsible", b =>
                {
                    b.Property<int>("MachineID");

                    b.Property<int>("ResponsibleID");

                    b.HasKey("MachineID", "ResponsibleID");

                    b.HasIndex("ResponsibleID");

                    b.ToTable("MachineResponsible");
                });

            modelBuilder.Entity("MachinePortal.Models.MachineVideo", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Category");

                    b.Property<string>("Extension");

                    b.Property<string>("FileName");

                    b.Property<int>("MachineID");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("Path");

                    b.Property<string>("Type");

                    b.HasKey("ID");

                    b.HasIndex("MachineID");

                    b.ToTable("MachineVideo");
                });

            modelBuilder.Entity("MachinePortal.Models.Responsible", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Department")
                        .IsRequired();

                    b.Property<string>("Email");

                    b.Property<string>("FirstName")
                        .IsRequired();

                    b.Property<string>("FullName");

                    b.Property<string>("LastName")
                        .IsRequired();

                    b.Property<string>("Mobile");

                    b.Property<string>("PhoneNumber");

                    b.Property<string>("PhotoPath");

                    b.HasKey("ID");

                    b.ToTable("Responsible");
                });

            modelBuilder.Entity("MachinePortal.Models.Sector", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AreaID");

                    b.Property<string>("ImagePath");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("ID");

                    b.HasIndex("AreaID");

                    b.ToTable("Sector");
                });

            modelBuilder.Entity("MachinePortal.Models.DeviceDocument", b =>
                {
                    b.HasOne("MachinePortal.Models.Device", "Device")
                        .WithMany("Documents")
                        .HasForeignKey("DeviceID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MachinePortal.Models.Line", b =>
                {
                    b.HasOne("MachinePortal.Models.Sector", "Sector")
                        .WithMany("Lines")
                        .HasForeignKey("SectorID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MachinePortal.Models.Machine", b =>
                {
                    b.HasOne("MachinePortal.Models.Area", "Area")
                        .WithMany()
                        .HasForeignKey("AreaID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("MachinePortal.Models.Line", "Line")
                        .WithMany()
                        .HasForeignKey("LineID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("MachinePortal.Models.Sector", "Sector")
                        .WithMany()
                        .HasForeignKey("SectorID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MachinePortal.Models.MachineComment", b =>
                {
                    b.HasOne("MachinePortal.Models.Machine", "Machine")
                        .WithMany("MachineComments")
                        .HasForeignKey("MachineID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("MachinePortal.Areas.Identity.Data.MachinePortalUser", "User")
                        .WithMany()
                        .HasForeignKey("UserID");
                });

            modelBuilder.Entity("MachinePortal.Models.MachineDevice", b =>
                {
                    b.HasOne("MachinePortal.Models.Device", "Device")
                        .WithMany()
                        .HasForeignKey("DeviceID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("MachinePortal.Models.Machine", "Machine")
                        .WithMany("MachineDevices")
                        .HasForeignKey("MachineID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MachinePortal.Models.MachineDocument", b =>
                {
                    b.HasOne("MachinePortal.Models.Machine", "Machine")
                        .WithMany("MachineDocuments")
                        .HasForeignKey("MachineID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MachinePortal.Models.MachineImage", b =>
                {
                    b.HasOne("MachinePortal.Models.Machine", "Machine")
                        .WithMany("MachineImages")
                        .HasForeignKey("MachineID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MachinePortal.Models.MachinePassword", b =>
                {
                    b.HasOne("MachinePortal.Areas.Identity.Data.Department", "Department")
                        .WithMany()
                        .HasForeignKey("DepartmentID");

                    b.HasOne("MachinePortal.Models.Machine", "Machine")
                        .WithMany("MachinePasswords")
                        .HasForeignKey("MachineID");
                });

            modelBuilder.Entity("MachinePortal.Models.MachineResponsible", b =>
                {
                    b.HasOne("MachinePortal.Models.Machine", "Machine")
                        .WithMany("MachineResponsibles")
                        .HasForeignKey("MachineID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("MachinePortal.Models.Responsible", "Responsible")
                        .WithMany()
                        .HasForeignKey("ResponsibleID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MachinePortal.Models.MachineVideo", b =>
                {
                    b.HasOne("MachinePortal.Models.Machine", "Machine")
                        .WithMany("MachineVideos")
                        .HasForeignKey("MachineID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MachinePortal.Models.Sector", b =>
                {
                    b.HasOne("MachinePortal.Models.Area", "Area")
                        .WithMany("Sectors")
                        .HasForeignKey("AreaID")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
